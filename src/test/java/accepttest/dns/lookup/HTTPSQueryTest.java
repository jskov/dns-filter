package accepttest.dns.lookup;

import static org.assertj.core.api.Assertions.assertThat;

import javax.inject.Inject;

import org.junit.jupiter.api.Test;

import dk.mada.dns.wire.model.DnsReply;
import fixture.dns.xbill.DnfFilterLocalHostLookup;
import io.quarkus.test.junit.QuarkusTest;

/**
 * Tests that RR HTTPS request does not explode when parsing.
 * 
 * The queries are seen from IPad. Included here for documentation,
 * but tested by making an https request.
 */
@QuarkusTest
public class HTTPSQueryTest {
	@Inject DnfFilterLocalHostLookup dnsFilterLookup;

	/* IPAD requesting something with HTTPS (RR HTTPS is type 65, 0x41)
	 * No support in dig for this option, it seems. 
	 * 
	* 0x0000 b4 53 01 00 00 01 00 00  00 00 00 00 07 67 73 70 .S...........gsp                                 
	* 0x0010 2d 73 73 6c 02 6c 73 05  61 70 70 6c 65 03 63 6f -ssl.ls.apple.co                          
	* 0x0020 6d 00 00 41 00 01                               m..A..                                 
	*/                                                                                                                    
	public static final byte[] GSP_SSL_APPLE_REQ = new byte[] {(byte)0xb4, 0x53, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x67, 0x73, 0x70, 0x2d, 0x73, 0x73, 0x6c, 0x02, 0x6c, 0x73, 0x05, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x03, 0x63, 0x6f, 0x6d, 0x00, 0x00, 0x41, 0x00, 0x01, };
	
	/* Dns server reply for gsp-ssl.ls.apple.com
	* 0x0000 b4 53 81 80 00 01 00 04  00 00 00 00 07 67 73 70 .S...........gsp
	* 0x0010 2d 73 73 6c 02 6c 73 05  61 70 70 6c 65 03 63 6f -ssl.ls.apple.co
	* 0x0020 6d 00 00 41 00 01 c0 0c  00 05 00 01 00 00 0d fa m..A............
	* 0x0030 00 21 07 67 73 70 2d 73  73 6c 08 6c 73 2d 61 70 .!.gsp-ssl.ls-ap
	* 0x0040 70 6c 65 03 63 6f 6d 06  61 6b 61 64 6e 73 03 6e ple.com.akadns.n
	* 0x0050 65 74 00 c0 32 00 05 00  01 00 00 00 08 00 11 0e et..2...........
	* 0x0060 67 73 70 2d 73 73 6c 2d  67 65 6f 6d 61 70 c0 3a gsp-ssl-geomap.:
	* 0x0070 c0 5f 00 05 00 01 00 00  00 26 00 0b 08 67 73 70 ._.......&...gsp
	* 0x0080 78 2d 73 73 6c c0 14 c0  7c 00 05 00 01 00 00 0d x-ssl...|.......
	* 0x0090 fa 00 13 06 67 65 74 2d  62 78 01 67 07 61 61 70 ....get-bx.g.aap
	* 0x00a0 6c 69 6d 67 c0 1d                               limg..
	 */
	public static final byte[] GSP_SSL_APPLE_REPLY = new byte[] {(byte)0xb4, 0x53, (byte)0x81, (byte)0x80, 0x00, 0x01, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x07, 0x67, 0x73, 0x70, 0x2d, 0x73, 0x73, 0x6c, 0x02, 0x6c, 0x73, 0x05, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x03, 0x63, 0x6f, 0x6d, 0x00, 0x00, 0x41, 0x00, 0x01, (byte)0xc0, 0x0c, 0x00, 0x05, 0x00, 0x01, 0x00, 0x00, 0x0d, (byte)0xfa, 0x00, 0x21, 0x07, 0x67, 0x73, 0x70, 0x2d, 0x73, 0x73, 0x6c, 0x08, 0x6c, 0x73, 0x2d, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x03, 0x63, 0x6f, 0x6d, 0x06, 0x61, 0x6b, 0x61, 0x64, 0x6e, 0x73, 0x03, 0x6e, 0x65, 0x74, 0x00, (byte)0xc0, 0x32, 0x00, 0x05, 0x00, 0x01, 0x00, 0x00, 0x00, 0x08, 0x00, 0x11, 0x0e, 0x67, 0x73, 0x70, 0x2d, 0x73, 0x73, 0x6c, 0x2d, 0x67, 0x65, 0x6f, 0x6d, 0x61, 0x70, (byte)0xc0, 0x3a, (byte)0xc0, 0x5f, 0x00, 0x05, 0x00, 0x01, 0x00, 0x00, 0x00, 0x26, 0x00, 0x0b, 0x08, 0x67, 0x73, 0x70, 0x78, 0x2d, 0x73, 0x73, 0x6c, (byte)0xc0, 0x14, (byte)0xc0, 0x7c, 0x00, 0x05, 0x00, 0x01, 0x00, 0x00, 0x0d, (byte)0xfa, 0x00, 0x13, 0x06, 0x67, 0x65, 0x74, 0x2d, 0x62, 0x78, 0x01, 0x67, 0x07, 0x61, 0x61, 0x70, 0x6c, 0x69, 0x6d, 0x67, (byte)0xc0, 0x1d, };

	/**
	 * Test that OPT section HTTPS decoding?
	 */
	@Test
	public void httpsConversionDoesNotExplode() {
		DnsReply r = dnsFilterLookup.serviceHttpsLookup("gsp-ssl.ls.apple.com");
		assertThat(r)
			.isNotNull();
	}
}
