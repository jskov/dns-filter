plugins {
    id 'eclipse'
	id 'io.quarkus'
    id 'java'
    id 'maven-publish'
}

ext {
	successMarker = project.file("build/all-tests-passed")
}

group = "dk.mada.dns"
version = "1-SNAPSHOT"

repositories {
     mavenLocal()
     mavenCentral()
}

configurations {
	forEclipse
}

dependencies {
	implementation enforcedPlatform("io.quarkus:quarkus-bom:${quarkusVersion}")
    implementation "io.quarkus:quarkus-resteasy-jsonb"
    implementation "io.quarkus:quarkus-undertow-websockets"

    implementation "dnsjava:dnsjava:${dnsJavaVersion}"

	compileOnly 'org.immutables:value-annotations:2.7.5'
	forEclipse 'org.immutables:value:2.7.5'
	annotationProcessor 'org.immutables:value:2.7.5'

    testImplementation "io.quarkus:quarkus-junit5"
    testImplementation "io.rest-assured:rest-assured"
    testImplementation "org.assertj:assertj-core:3.11.1"
    testImplementation "dnsjava:dnsjava:${dnsJavaVersion}"
    
//    testImplementation "io.quarkus:quarkus-undertow-websockets-deployment"
}

publishing {
    publications {
        myLibrary(MavenPublication) {
            from components.java
        }
    }
}

task makeSuccessMarker() {
	doFirst {
		project.mkdir("build")
		successMarker.createNewFile()
	}
}

test {
	dependsOn(makeSuccessMarker)
    useJUnitPlatform {
        excludeTags "accept", "integration"
    }  
    ignoreFailures = true
    afterTest { td, tr ->
		if (tr.resultType == org.gradle.api.tasks.testing.TestResult.ResultType.FAILURE) {
			successMarker.delete()
		}
    }

    environment("GRADLE_TEST", "true")
}

task integrationTest(type: Test) {
	dependsOn(makeSuccessMarker)
    useJUnitPlatform {
  	    includeTags "integration"
    }
    ignoreFailures = true
    afterTest { td, tr ->
		if (tr.resultType == org.gradle.api.tasks.testing.TestResult.ResultType.FAILURE) {
			successMarker.delete()
		}
    }
    
    environment("GRADLE_TEST", "true")
}

// Need to publish to MavenLocal because @QuarkusTest does not yet handle Gradle
task acceptTest(type: Test, dependsOn: "publishToMavenLocal") {
	dependsOn(makeSuccessMarker)
    useJUnitPlatform {
  	    includeTags "accept"
    }
    ignoreFailures = true
    afterTest { td, tr ->
		if (tr.resultType == org.gradle.api.tasks.testing.TestResult.ResultType.FAILURE) {
			successMarker.delete()
		}
    }

    environment("GRADLE_TEST", "true")
}

tasks.check.dependsOn(acceptTest, integrationTest)


sourceCompatibility = 11
targetCompatibility = 11

tasks.eclipseClasspath.dependsOn("cleanEclipseClasspath")
tasks.eclipse.doLast {
	println configurations.forEclipse.asPath
}