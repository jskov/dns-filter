buildscript {
    repositories {
    	mavenLocal()
        mavenCentral()
    }
    dependencies {
		classpath 'com.gluonhq:client-gradle-plugin:0.1.28'
    }
}

plugins {
    id 'eclipse'
    id 'java'
    id "org.openjfx.javafxplugin" version "0.0.8" apply false
	id "io.quarkus" version "2.0.2.Final"
}

ext {
	dnsJavaVersion = "3.3.1"
	quarkusVersion = "2.0.2.Final"	// change to 999-SNAPSHOT to test fix

	successMarker = project.file("build/all-tests-passed")
}

group = "dk.mada.dns"

sourceCompatibility = 11
targetCompatibility = 11


repositories {
	mavenLocal()
    mavenCentral()
}
	
configurations {
	forEclipse
	jbossLogging
	log4j2Logging
}

dependencies {
	implementation enforcedPlatform("io.quarkus:quarkus-bom:${quarkusVersion}")
    implementation "io.quarkus:quarkus-resteasy-jsonb"
    implementation "io.quarkus:quarkus-undertow-websockets"

    implementation "dnsjava:dnsjava:${dnsJavaVersion}"
    implementation "net.java.dev.jna:jna-platform:5.5.0"

    implementation project(":dns-filter.dtos")

	compileOnly 'org.immutables:value-annotations:2.7.5'
	forEclipse 'org.immutables:value:2.7.5'
	annotationProcessor 'org.immutables:value:2.7.5'

    testImplementation "io.quarkus:quarkus-junit5"
    testImplementation "io.rest-assured:rest-assured"
    testImplementation "org.assertj:assertj-core:3.11.1"
    testImplementation "dnsjava:dnsjava:${dnsJavaVersion}"
	testImplementation "io.quarkus:quarkus-arc-deployment:${quarkusVersion}"
	testImplementation "io.quarkus:quarkus-undertow-deployment:${quarkusVersion}"
	
	testImplementation "org.jboss.weld:weld-junit5:2.0.1.Final"
	testImplementation "org.jboss.weld.se:weld-se-core:3.1.5.SP1" // override the older version referenced by weld-junit5. 4.0.0.Final

	// Exclusively for eclipse, so junit tests can be run with logging	
	jbossLogging	"org.jboss.slf4j:slf4j-jboss-logmanager:1.1.0.Final"
	log4j2Logging   "org.apache.logging.log4j:log4j-slf4j-impl:2.14.0"
}

processResources {
	filter {
		 it
		 	.replace("@workspace-default-version@", project.version)
		 	.replace("@workspace-default-revision@", project.ext.revision)
 	 }
}

task makeSuccessMarker() {
	doFirst {
		project.mkdir("build")
		successMarker.createNewFile()
	}
}

test {
	dependsOn(makeSuccessMarker)
    useJUnitPlatform {
  	    includeTags "accept"
    }  
    ignoreFailures = true
    afterTest { td, tr ->
		if (tr.resultType == org.gradle.api.tasks.testing.TestResult.ResultType.FAILURE) {
			successMarker.delete()
		}
    }

	doFirst {
		// "copy beans.xml into same folder hiearchy as class files"
		copy {
			from "build/resources/main"
			into "build/classes/java/main"
			include "META-INF/beans.xml"
		}
	}
    environment("GRADLE_TEST", "true")
}

task integrationTest(type: Test) {
	dependsOn(makeSuccessMarker)
    useJUnitPlatform {
  	    includeTags "integration"
    }
    ignoreFailures = true
    afterTest { td, tr ->
		if (tr.resultType == org.gradle.api.tasks.testing.TestResult.ResultType.FAILURE) {
			successMarker.delete()
		}
    }
    
    environment("GRADLE_TEST", "true")
}

task unitTest(type: Test) {
	dependsOn(makeSuccessMarker)
    useJUnitPlatform {
        excludeTags "accept", "integration"
    }
    ignoreFailures = true
    afterTest { td, tr ->
		if (tr.resultType == org.gradle.api.tasks.testing.TestResult.ResultType.FAILURE) {
			successMarker.delete()
		}
    }

    environment("GRADLE_TEST", "true")
}

tasks.check.dependsOn(unitTest, integrationTest)

tasks.testNative.enabled = false
tasks.buildNative.enabled = false

tasks.eclipseClasspath.dependsOn("cleanEclipseClasspath")
eclipse { 
  classpath {
    minusConfigurations += [ configurations.jbossLogging ]
    plusConfigurations += [ configurations.log4j2Logging ]
  }
}

project (":dns-filter.javafx") {
	apply plugin: "java"
	apply plugin: "eclipse"
	apply plugin: "org.openjfx.javafxplugin"
	
	repositories {
	    mavenCentral()
    }
	
	sourceCompatibility = 11
	targetCompatibility = 11
	
	javafx {
		version = '13.0.2'
    	modules = [ 'javafx.controls', 'javafx.fxml' ]
	}
	//mainClassName = 'dk.mada.dns.android.HelloWorld'
	
	dependencies {
	    implementation project(":dns-filter.dtos")
		implementation "org.jboss.weld.se:weld-se-core:3.1.3.Final"
		implementation "org.apache.logging.log4j:log4j-slf4j-impl:2.13.0"
	}
	
	eclipseClasspath.dependsOn('cleanEclipseClasspath')
	eclipse {
	  	classpath {
	  		file {
	  			withXml {
	  				def node = it.asNode()
					node.classpathentry.findAll { cpe -> cpe.@path.contains("javafx") }.each { cpe -> markCpeAsModular(cpe) }
				}
	  		}
	  	}
  	}
}

project (":dns-filter.dtos") {
	apply plugin: "java"
	apply plugin: "java-library"
	apply plugin: "eclipse"
	
	repositories {
	    mavenCentral()
    }
	
	sourceCompatibility = 11
	targetCompatibility = 11
	
	dependencies {
	}
}

void markCpeAsModular(Node cpe) {
	def n = cpe.appendNode("attribute", ["name": "module", "value": "true"])
	cpe.attributes.each { attrs -> attrs.append(n) }
}

project (":dns-filter.android") {
	apply plugin: "java"
	apply plugin: "eclipse"
	apply plugin: "org.openjfx.javafxplugin"
	apply plugin: 'com.gluonhq.client-gradle-plugin'

	javafx {
		version = '11'
	    modules = [ 'javafx.controls', 'javafx.base' ]
	}
	
	repositories {
		mavenCentral()
	}
	
	ext {
		mainClassName = 'dk.mada.dns.android.HelloWorld'
	}

	gluonClient {
		verbose = true
	
	}
/*	
	jfxmobile {
	    android {
			androidSdk = "/opt/android"
	        applicationPackage = 'dk.mada.dns.android'
	        compileSdkVersion = 25
	    }
	}
*/
	sourceCompatibility = 11
	targetCompatibility = 11
	
	
	dependencies {
	}
}

