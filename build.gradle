buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "io.quarkus:quarkus-gradle-plugin:${quarkusVersion}"
		classpath 'org.javafxports:jfxmobile-plugin:1.3.18'
	    classpath "org.openjfx:javafx-plugin:0.0.8"
    }
}

plugins {
    id 'eclipse'
    id 'java'
}

apply plugin: "io.quarkus"

ext {
	successMarker = project.file("build/all-tests-passed")
}

group = "dk.mada.dns"
version = "1-SNAPSHOT"

repositories {
     mavenCentral()
}

configurations {
	forEclipse
}

dependencies {
	implementation enforcedPlatform("io.quarkus:quarkus-bom:${quarkusVersion}")
    implementation "io.quarkus:quarkus-resteasy-jsonb"
    implementation "io.quarkus:quarkus-undertow-websockets"

    implementation "dnsjava:dnsjava:${dnsJavaVersion}"

	compileOnly 'org.immutables:value-annotations:2.7.5'
	forEclipse 'org.immutables:value:2.7.5'
	annotationProcessor 'org.immutables:value:2.7.5'

    testImplementation "io.quarkus:quarkus-junit5"
    testImplementation "io.rest-assured:rest-assured"
    testImplementation "org.assertj:assertj-core:3.11.1"
    testImplementation "dnsjava:dnsjava:${dnsJavaVersion}"
}

task makeSuccessMarker() {
	doFirst {
		project.mkdir("build")
		successMarker.createNewFile()
	}
}

test {
	dependsOn(makeSuccessMarker)
    useJUnitPlatform {
  	    includeTags "accept"
    }  
    ignoreFailures = true
    afterTest { td, tr ->
		if (tr.resultType == org.gradle.api.tasks.testing.TestResult.ResultType.FAILURE) {
			successMarker.delete()
		}
    }

    environment("GRADLE_TEST", "true")
}

task integrationTest(type: Test) {
	dependsOn(makeSuccessMarker)
    useJUnitPlatform {
  	    includeTags "integration"
    }
    ignoreFailures = true
    afterTest { td, tr ->
		if (tr.resultType == org.gradle.api.tasks.testing.TestResult.ResultType.FAILURE) {
			successMarker.delete()
		}
    }
    
    environment("GRADLE_TEST", "true")
}

task unitTest(type: Test) {
	dependsOn(makeSuccessMarker)
    useJUnitPlatform {
        excludeTags "accept", "integration"
    }
    ignoreFailures = true
    afterTest { td, tr ->
		if (tr.resultType == org.gradle.api.tasks.testing.TestResult.ResultType.FAILURE) {
			successMarker.delete()
		}
    }

    environment("GRADLE_TEST", "true")
}

tasks.check.dependsOn(unitTest, integrationTest)

tasks.testNative.enabled = false
tasks.buildNative.enabled = false
tasks.quarkusBuild.enabled = false


sourceCompatibility = 11
targetCompatibility = 11

tasks.eclipseClasspath.dependsOn("cleanEclipseClasspath")


project (":dns-filter.android") {
	apply plugin: "java"
	apply plugin: "eclipse"
	apply plugin: 'org.javafxports.jfxmobile'
	apply plugin: "org.openjfx.javafxplugin"

	javafx {
		version = '11'
	    modules = [ 'javafx.controls', 'javafx.base' ]
	}
	
	repositories {
		jcenter()
	}
	
	jfxmobile {
	    android {
			androidSdk = "/opt/android"
	        applicationPackage = 'dk.mada.dns.android'
	        compileSdkVersion = 25
	    }
	}

	sourceCompatibility = 11
	targetCompatibility = 11
	
	mainClassName = 'dk.mada.dns.android.HelloWorld'
	
	dependencies {
	}
}
